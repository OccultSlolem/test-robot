[1mdiff --git a/src/main/java/frc/team3256/lib/path/Arc.java b/src/main/java/frc/team3256/lib/path/Arc.java[m
[1mindex d2ce150..09a9e7d 100644[m
[1m--- a/src/main/java/frc/team3256/lib/path/Arc.java[m
[1m+++ b/src/main/java/frc/team3256/lib/path/Arc.java[m
[36m@@ -148,6 +148,7 @@[m [mpublic class Arc extends Segment{[m
         double remainingDistance = getRemainingDistance(closestPoint);[m
         double outputVelFromEnd = Math.sqrt(Math.pow(goalVel, 2.0)-2*maxAccel*remainingDistance);[m
         double outputVel = prevVelocity + maxAccel * Constants.kControlLoopPeriod;[m
[32m+[m[32m        outputVelFromEnd = Double.isNaN(outputVelFromEnd) ? outputVel : outputVelFromEnd;[m
         outputVel = Math.min(outputVel, outputVelFromEnd);[m
         outputVel = Math.min(outputVel, maxVel);[m
         return outputVel;[m
[1mdiff --git a/src/main/java/frc/team3256/lib/path/Line.java b/src/main/java/frc/team3256/lib/path/Line.java[m
[1mindex 5a8f95b..e021654 100644[m
[1m--- a/src/main/java/frc/team3256/lib/path/Line.java[m
[1m+++ b/src/main/java/frc/team3256/lib/path/Line.java[m
[36m@@ -129,6 +129,7 @@[m [mpublic class Line extends Segment{[m
         double remainingDistance = getRemainingDistance(closestPoint);[m
         double outputVelFromEnd = Math.sqrt(Math.pow(goalVel, 2.0)-2*maxAccel*remainingDistance);[m
         double outputVel = prevVelocity + maxAccel * Constants.kControlLoopPeriod;[m
[32m+[m[32m        outputVelFromEnd = Double.isNaN(outputVelFromEnd) ? outputVel : outputVelFromEnd;[m
         outputVel = Math.min(outputVel, outputVelFromEnd);[m
         outputVel = Math.min(outputVel, maxVel);[m
         return outputVel;[m
[1mdiff --git a/src/test/java/frc/team3256/lib/path/PurePursuitTrackerTest.java b/src/test/java/frc/team3256/lib/path/PurePursuitTrackerTest.java[m
[1mindex 8be9852..8eb0351 100644[m
[1m--- a/src/test/java/frc/team3256/lib/path/PurePursuitTrackerTest.java[m
[1m+++ b/src/test/java/frc/team3256/lib/path/PurePursuitTrackerTest.java[m
[36m@@ -16,8 +16,8 @@[m [mpublic class PurePursuitTrackerTest {[m
 [m
         Path p = new Path();[m
         p.addSegment(new Line(0, 0, 24, 24, 120.0, 20.0, 250.0));[m
[31m-        p.addSegment(new Arc(24, 24, 48,24, 36, 24));[m
[31m-        p.addSegment(new Line(48, 12, 70, 12, 10, 5, 15));[m
[32m+[m[32m        p.addSegment(new Arc(24, 24, 48,24, 36, 24, 120.0, 20.0, 250.0));[m
[32m+[m[32m        p.addSegment(new Line(48, 12, 72, 12, 10, 10, 15));[m
 [m
         PurePursuitTracker pursuit = new PurePursuitTracker(p, 1.0);[m
         Translation robotCoordinates = new Translation(15, 3);[m
[36m@@ -49,18 +49,11 @@[m [mpublic class PurePursuitTrackerTest {[m
         robotCoordinates = new Translation(48.2, 24.2);[m
         pursuit.update(robotCoordinates);[m
 [m
[31m-[m
[31m-[m
[31m-[m
[31m-[m
[31m-[m
[31m-        /*[m
[31m-        robotCoordinates = new Translation(30, 0);[m
[31m-        Twist pursuitUpdate = pursuit.update(robotCoordinates, 20);[m
[31m-        System.out.println(pursuitUpdate.delta);[m
[31m-        System.out.println(pursuitUpdate.vel);[m
[31m-[m
[31m-[m
[32m+[m[32m        robotCoordinates = new Translation(50, 0);[m
[32m+[m[32m        command = pursuit.update(robotCoordinates);[m
[32m+[m[32m        assertEquals(command.dy(), 0.0, kEpsilon);[m
[32m+[m[32m        assertEquals(command.dx(), 5 * 20.0  * Constants.kControlLoopPeriod, kEpsilon);[m
[32m+[m[32m/*[m
         robotCoordinates = new Translation(14, 15);[m
         pursuitUpdate = pursuit.update(robotCoordinates, 0);[m
         System.out.println(pursuitUpdate.delta);[m
